@NonCPS
def String foo(String curVer) {
  def version = "${curVer}".trim()
  def pattern = ~/(\d{1,3})\.(\d{1,3})\.\d{1,4}$/
  def newVersion = version.replaceFirst(pattern) { _,major,minor -> "${major}.${(minor as int) + 1}.0"}
  newVersion =newVersion.trim()
  println "Version ${version} -> new ${newVersion}"
  return newVersion
}

def service = "hw2"
pipeline {
    agent any
    
    stages {
        stage('Example Build') {
            steps {
               script {
                 String curVer =readFile(file: "${service}/version")
                   String updatedVer = foo(curVer) 
                   echo "${updatedVer}"
                   writeFile(file: "${service}/version", text: "${updatedVer}")   
                   def shortCommit = sh(returnStdout: true, script: "git log -n 1 --pretty=format:'%h'").trim()
                   def finalVersion = "${updatedVer}-${currentBuild.number}-${shortCommit}".trim()
                   sh "git clone https://github.com/argoproj/argo-helm.git"
                   sh "ls"
                   echo "${finalVersion}"
                }
                dir("${WORKSPACE}") {
                  withCredentials([usernamePassword(credentialsId: '528ae1ce-83de-4783-abf0-fbf7eb62d686', usernameVariable: 'USERNAME', passwordVariable: 'PASSWORD')]) {
                        sh "git status" 
                    
                    
                        sh "git config --global user.name $USERNAME"
                        sh "git config --global user.password $PASSWORD"
                        sh "git add ${service}/version"
                        sh "git commit -m 'Added to  version file the new ver: automated Jenikins job'"
                        sh "git push origin master"
                   }
                
                }
            }
        }
    }
}
